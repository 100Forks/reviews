In this task, we need to simplify the usages of the auxiliary functions. In this case, they are used not their best way, not in the most straightforward way. In the first task we have the 'let' function, and it assigns some values to properties. The problem here is this 'it' variable, which somehow we use, and we use it only as the receiver. It makes sense to replace 'it' with an implicit receiver, to replace this lambda with a lambda with implicit receiver. We can simply do this by converting 'let' to 'run'. Or to use 'with' instead. For instance here, we can either use 'run' or because in this case, it's possible, we use also 'with'. Both options are possible in this case. Next example also shows an anti-pattern because you use both these auxiliary functions, one after another. That really happens, sometimes in the code, and probably you just wanted to express something, then you change your mind, you had some idea, then you used again another function. But this first usage, when you used something with 'it' after calling 'let,' that just can be replaced with one 'run' call. For instance here, and that just looks more simple, no need to use these functions one after another. In the last case, we use 'with'. But you see that you return 'this' as the last expression, and there is another function that does exactly that, that returns 'this', and it's the 'apply' function. 'apply' function just returns 'this'. It says now that 'this' expression is unused because in the 'apply' case, the lambda returns 'Unit'. It is considered to return nothing meaningful and the receiver is used as the result. There were just simple cases when these functions were misused. There are often situations when one or the other is possible, and both options are correct, and you may find more information about that in different style guides.