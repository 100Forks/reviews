Extensions are often named among the most important or ''lovable'' features of Kotlin. Why are they so important? Well, extensions have proven to be one of the most useful abstraction features of Kotlin. I think their main purpose is to keep your classes and interfaces APIs minimal. This is really important because this keeps the abstractions or things you'd try to describe to module with your class interfaces understandable. So, it's important to capture the essence of the abstraction with this small set of members that covers the essential functionality. All the auxiliary functions, all the utilities convenience methods can be written as extensions calling to this public API. So, this is the main principle. As an example, you can take the string class from the Kotlin library. So, what's a string? Essentially, it's a collection of characters that can be indexed. So, string has only a handful of methods like take a length, take a character by index, and so forth, and everything else like the huge number of utility methods available on the string, like everything about regular expressions, matching, splitting, so on and so forth, converting to uppercase, lowercase, and many, many more methods are all extensions. So, you can clearly see what a string is, and then express everything else through its API. Doesn't mean principle and I think we should develop all our abstractions this way. So, when you have this division like members for intrinsic things and extensions for everything else, it makes sense to put them closer to each other so that it's easy to discover extensions in the code. So, you can oversee survey the entire API surface of your abstraction. So, when you use extensions for your own classes, define them close to the class itself if they are general-purpose. Of course, if you have something specific to a sub-domain in your application like in a different module, you have something specific to add to this class then keep that extension there in the module where it belongs to, but still group extensions to the same class together. What other use cases are extensions good for? Another important situation you want to use extension in is when you don't control some class or interface because it sits in the library or it's in another module or something like this, but you still want to extend its API somehow. So, through this, you can even extend the APIs of existing Java libraries. So, even if something has no knowledge, no awareness of Kotlin at all, you can turn it into a Kotlin-like ergonomic idiomatic API through simply adding a couple of extensions. That's proven to be a very useful thing. So, many existing Java libraries have companion libraries with a number of extensions that are useful in calling code. So, it's important again to group extensions together. When you extend some library or some particular class, just put all the logically connected extensions into the same file so that they're easily discoverable, and otherwise, you just have a nicer API basically for free.