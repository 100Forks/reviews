What would be your advice on how to introduce Kotlin into an existing project? Well, there is always an option of trying Kotlin out in a try project first. But I would recommend to check it out in a real-life setting because this way you can get a real feel of the language and see how it works for you in your daily work. So, a good place to start would be picking
some very small portion of existing Java code and convert it over to Kotlin using our Java to Kotlin conversion tool. So perhaps, you can take a class that you're going to refactor anyway, and convert it first using J2K, and then refactor and see if you like the Kotlin
code better than Java code you had before. So this is a good start, you can get the feel of the language. Then maybe it's a good idea to pick one small feature or a single class and write it in Kotlin from scratch to see how it's done step by step. By the way, you don't have to alter any surrounding Java code at all because the Kotlin and Java interop is pretty smooth. Java code is not aware of any Kotlin running anywhere in the project. So over time, you can go and either convert or write new things in Kotlin. You can mix and match Java and Kotlin
code in any combination, basically. You don't have to convert everything to Kotlin, ever, you can keep some of your code in Java forever, you can convert as you go or pick any strategy you like. So that's one option. If you're looking for a more conservative,
more cautious way of doing this, it may make sense to start with unit tests. So not touching any production code, not introducing any risks to your production code base, you can write a unit test in Kotlin and see how the language is working for you. It's still a real-life task, it's not something made up. Writing unit tests, you will see how youâ€™re getting along with Kotlin. Then when you're confident enough,
you can transfer to the production code base. In any case, it will give you the sense of the language and you will see if it's working for you, if it's actually better.