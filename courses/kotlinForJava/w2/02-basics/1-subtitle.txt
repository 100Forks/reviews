In this video, you'll see how the classical first "Hello, World!" program can be written in Kotlin. We'll discuss how it's different from Java. And you'll also learn about Kotlin language features that can improve this already simple piece of code, such as top-level functions, and string templates. Let's look at our "Hello, World" example. In our case, it will be "Hello, Kotlin" example. This simple program prints “Hello, Kotlin”. Let’s try to compare it with the similar code written in Java. The first thing that comes to mind, apart from these new keywords for function and variable declaration, is that there is no class here. This function is defined at the top level, and it is the only contents of the file. Our file “Hello.kt” is the whole program. It contains the package declaration and the function at the top level. In Kotlin, you can define the function at the package level. You no longer need to put everything inside a class, to define a lot of static utility functions inside a special util class. If you need general functions without binding to the specific class, you can define them at the package level. In Java, the ‘main’ function always requires the program argument list. But for simple use-cases, these program arguments are often unused. Starting from Kotlin 1.3, you can omit ‘main’ program arguments, and define ‘args’ parameter only if needed. To make our first program a bit less trivial, let’s print “Kotlin” if no program arguments are passed, or "Hello" and the value of the program argument if there are some arguments. There is no special built-in syntax for arrays. Under the hood, at the bytecode level, it's the same array as in Java. However, in the code, Array looks like a regular class with generic arguments. Note that in Kotlin, 'if' is an expression. You can assign the result of 'if' into a variable or return it from a function. 'if' returns you the result value. Here, we use 'if' to check whether there are any arguments passed to this function. In Kotlin, you can use this nice syntax for String templates. You can insert a value inside a string literal by using a dollar sign and a variable name. If you need to print out a more complicated expression, like a function call, 'if' expression, or some arithmetic expression, you can insert the value of this expression,
but you have to surround it with curly braces. For example, we can print the value of the first argument,
if some arguments are passed. What do you think is printed if there are no arguments? There are three answer options. "Hello, null!" will be printed, "Hello" and exclamation mark, or NullPointerException will be thrown. What’s your choice? Under the hood, Kotlin uses java.lang.String, and that means that such things work directly as in Java. The question might be then reworded as
"How the same logic would work in Java?” In Java, if you try to print the value of 'null’, or to add 'null' to a string, you will see "Hello, null!" as a result. In Kotlin it's absolutely the same. Under the hood, java.lang.String's methods are called. ‘java.lang.String’ transforms 'null' constant into a string "null". If you want an empty string instead of “null”, as in Java, you have to process that explicitly. The right answer is "Hello, null!”. One more question. Here, we call the 'foo()' function twice inside a String template. And the question is, how many times the result of this 'foo()' function will be computed? The first option is that it will be computed twice, and "Calculating foo..." will be printed twice. The second option is that it’ll be somehow cached, and the function 'foo()' will be called only once. What do you think? The answer is the first one. We simply call a function twice inside a string template. There is no magic here, no unexpected optimizations. Your function can return a different value on each access. If you want to store this value and compute it once, you have to do that manually. If you call the function twice, it will be computed twice. In this video, you've learned that functions might be declared at the top level, ”if” is an expression in Kotlin, and you can insert any expression inside a string using String templates. Next, we'll focus on variables in Kotlin.