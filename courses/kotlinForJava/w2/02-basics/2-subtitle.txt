In this video, you'll learn how to define and use variables in Kotlin. There are two main keywords to define variables, 'val' and 'var'. 'val' comes from 'value' and denotes a read-only or assigned-once variable, while 'var' comes from 'variable' and denotes a mutable variable, the one that can be modified. Read-only variable can't be reassigned. If you try to assign a new value to it, you'll get the compiler error. In essence, 'val' in Kotlin corresponds to a 'final' variable in Java. If you need to reassign a variable, you declare it as 'var'. Then you can easily assign a new value to it. In Kotlin you can omit the types of variables and the compiler will infer the types for you. Here, we omitted the types of these two variables, and they are inferred automatically by the compiler. Kotlin is a statically-typed language, which means that
every variable, every expression has a type. Even if you omit the type, the compiler just infers it for you. It doesn't mean that this variable doesn't have a type or it's unknown. It means that the type specification is verbose, it’s clear from the context, and you trust the compiler to infer the type. The question to you, why doesn't the following code compile? Because you can't reassign a 'var’ variable, because you can't assign an integer value to a variable of 'String' type, or assign a string literal to a variable of 'Int' type? The third option is correct. Because of the local type inference here, 'Int' type of the variable is inferred. It is called ‘string’ but it was done on purpose only to confuse you! The type of this ‘string’ variable is ‘Int’. And the Kotlin compiler complains that you try to assign a string literal
to a variable of an 'Int' type, but 'Int' is expected. That's the compiler error. Another question for you. Is it possible to modify an object stored in 'val', what do you think? The options are 'yes' and 'no'. If we're talking about reference types, in Kotlin as in Java, variables just refer to some objects stored in memory. And this question can be reworded as: Does 'val' put any additional constraints on the stored object? Of course, there are no additional constraints. You can easily modify an object stored in 'val', as in Java. 'val', like a 'final' variable, is an immutable reference which doesn't say anything about the content that is stored. For example, here we have a reference to a mutable list, 'languages' refers to an object in memory. We can modify this object by accessing the modification method. We can't assign another reference to the 'languages' variable, but we can easily modify the exact object. Another question. What do you think, why doesn't the following code compile? That might be a source of confusion for people who are new to Kotlin. The declared variable has the type 'List',
but when you try to modify it you see an error. What do you think, that’s because you can't modify a read-only list or modify an object stored in 'val’? You can't modify a read-only list. We’ve already discussed that 'val' doesn't give you any guarantees about the content stored in an object, the content can be easily modified, so the second option is wrong. In Kotlin, we have a distinction between mutable and read-only lists. Note that we use the same keywords "mutable" and "read-only" as for variables. In this case, read-only 'List' just lacks mutating methods. If you try to call 'add' on a Kotlin 'List', which is a read-only list, the compiler will complain that there is no such method available. By default, strive to declare all your new variables with 'val' keyword, not 'var'. Using immutable references, immutable objects and functions without side effects makes your code closer to the functional style, which is easier to understand and support in the end. When the type specifications are clear from the context, it's safe to omit them. For instance, if it's a variable of a primitive type or String, or the type is clear from the variable name, that's rather straightforward. However, if any confusion of what's going on is possible, It's better just to have this type specification explicitly, to keep it, to avoid this confusion. In this video, you've learned about two different keywords to define variables in Kotlin, 'val' for read-only variables and 'var' for a variable that you might need to modify later. Next, we are going to discuss functions.